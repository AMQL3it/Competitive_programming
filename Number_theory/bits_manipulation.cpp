/******************************************************************************
 *----------------------------------------------------------------------------*
 *                                                                            *
 *        If the plan does not work, change the plan but not the goal.        *
 *----------------------------------------------------------------------------*
 *        Life is just a life. Lead it, Feel it & Enjoy It Properly.          *
 *        Nothing is impossible. Just believe in yourself & Almighty.         *
 *----------------------------------------------------------------------------*
 *                                                                            *
 *----------------------------------------------------------------------------*
 ******************************************************************************/

/// ########################## Bits Manipulation ##############################

#include<bits/stdc++.h>
using namespace std;

///############################# Typedef Section #############################

typedef unsigned int ui;
typedef long long int ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ldb;

///############################################################################

///############################# Define Section ###############################
#define FST_IO ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define READ          freopen("in.txt","r",stdin)
#define WRITE         freopen("out.txt","w",stdout);
#define nl            "\n"
#define pi            acos(-1.0)
#define mem(arr,val)  memset(arr,val,sizeof(arr))
#define pb            push_back
#define mp            make_pair
#define pr            pair<ll,ll>
#define ff            first
#define ss            second
#define mod           32768
#define INF           1e18
///############################################################################

///############################# Input Section ################################

#define si1(x)        scanf("%d",&x)
#define si2(x,y)      scanf("%d %d", &x, &y)
#define si3(x,y,z)    scanf("%d %d %d", &x, &y, &z)

#define sd1(x)        scanf("%lf",&x)
#define sd2(x,y)      scanf("%lf %lf", &x, &y)
#define sd3(x,y,z)    scanf("%lf %lf %lf", &x, &y, &z)

#define sli1(x)       scanf("%lld",&x)
#define sli2(x,y)     scanf("%lld %lld", &x, &y)
#define sli3(x,y,z)   scanf("%lld %lld %lld", &x, &y, &z)

///############################################################################

///############################# Basic Concepts ###############################

/*
    ‡¶¨‡¶ø‡¶ü ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶™‡ßÅ‡¶≤‡ßá‡¶∂‡¶® ‡¶∂‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶ü‡¶™‡¶ø‡¶ï‡¶∏‡¶Æ‡ßÇ‡¶π
    i. ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶°‡ßá‡¶∏‡¶ø‡¶Æ‡¶æ‡¶≤ ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞
    ‡¶¨‡¶ø‡¶ü ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶™‡ßÅ‡¶≤‡ßá‡¶∂‡¶® ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

    ii. ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ï‡¶ø‡¶Ç (Masking)
    ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶¨‡¶ø‡¶ü ‡¶∏‡ßá‡¶ü ‡¶¨‡¶æ ‡¶ï‡ßç‡¶≤‡¶ø‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§
    iii. Set, Clear, Toggle, ‡¶è‡¶¨‡¶Ç Check ‡¶¨‡¶ø‡¶ü
    Set: ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶ø‡¶ü‡¶ï‡ßá 1-‡¶è ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá: n | (1 << i)
    Clear: ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶ø‡¶ü‡¶ï‡ßá 0-‡¶è ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá: n & ~(1 << i)
    Toggle: ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶ø‡¶ü ‡¶â‡¶≤‡ßç‡¶ü‡¶æ‡¶§‡ßá: n ^ (1 << i)
    Check: ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶ø‡¶ü 1 ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá: (n & (1 << i)) != 0
*/

///############################## Bit Set up ##################################
/*
    1. BitSetUp(int x, int idx)
    ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø x ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ idx-‡¶§‡¶Æ ‡¶¨‡¶ø‡¶ü‡¶ï‡ßá 1 ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡ßü‡•§

    ‡¶≤‡¶ú‡¶ø‡¶ï:
    1 << idx: 1-‡¶ï‡ßá idx-‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶∏‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßá‡¶¨‡¶≤ idx-‡¶§‡¶Æ ‡¶¨‡¶ø‡¶ü 1 ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶∏‡¶¨ 0‡•§
    ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: idx = 2 ‡¶π‡¶≤‡ßá, 00000100‡•§
    x | (1 << idx): ‡¶¨‡¶ø‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶á‡¶ú OR ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá idx-‡¶§‡¶Æ ‡¶¨‡¶ø‡¶ü‡¶ï‡ßá 1 ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡•§

    ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
        int x = 5; // ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø: 0101
        int idx = 1;
        x = BitSetUp(x, idx); // ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø: 0101 | 0010 = 0111
        cout << x; // ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü: 7
    ‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ:

    ‡¶Ü‡¶ó‡ßá: 
        ùë• = 5 = 0101
    ‡¶™‡¶∞‡ßá: 
        idx = 1 ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßá ‡¶¨‡¶ø‡¶ü 1 ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º, ‡¶´‡¶≤‡ßá 
        x = 7 = 0111‡•§
*/
int BitSetUp(int x, int idx){ return x = x | (1<<idx); }

///############################################################################

///############################## Bit Unset ###################################
/*
    2. BitUnSet(int x, int idx)
    ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø x ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ idx-‡¶§‡¶Æ ‡¶¨‡¶ø‡¶ü‡¶ï‡ßá 0 ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶Ø‡¶º‡•§

    ‡¶≤‡¶ú‡¶ø‡¶ï:
        1 << idx: 1-‡¶ï‡ßá idx-‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶∏‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßá‡¶¨‡¶≤ idx-‡¶§‡¶Æ ‡¶¨‡¶ø‡¶ü 1‡•§
        ~(1 << idx): ‡¶è‡¶ü‡¶ø‡¶∞ NOT ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶¨ ‡¶¨‡¶ø‡¶ü 1 ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ idx-‡¶§‡¶Æ ‡¶¨‡¶ø‡¶ü 0‡•§
        ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: idx = 2 ‡¶π‡¶≤‡ßá, 11111011‡•§
        x & (~(1 << idx)): ‡¶¨‡¶ø‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶á‡¶ú AND ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá idx-‡¶§‡¶Æ ‡¶¨‡¶ø‡¶ü‡¶ï‡ßá 0 ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡•§

    ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
        int x = 7; // ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø: 0111
        int idx = 1;
        x = BitUnSet(x, idx); // ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø: 0111 & 1101 = 0101
        cout << x; // ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü: 5

    ‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ:
        ‡¶Ü‡¶ó‡ßá: x = 7 = 0111
        ‡¶™‡¶∞‡ßá: idx = 1 ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßá‡¶∞ ‡¶¨‡¶ø‡¶ü 0 ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º, ‡¶´‡¶≤‡ßá 
        x = 5 = 0101‡•§
*/
int BitUnSet(int x, int idx){ return x = x & (~(1<<idx)); }
///############################################################################

///############################## Bit Checking ################################
/*
    3. BitCheking(int x, int idx)
    ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá x ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ idx-‡¶§‡¶Æ ‡¶¨‡¶ø‡¶ü 1 ‡¶ï‡¶ø‡¶®‡¶æ‡•§

    ‡¶≤‡¶ú‡¶ø‡¶ï:
        1 << idx: 1-‡¶ï‡ßá idx-‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶∏‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßá‡¶¨‡¶≤ idx-‡¶§‡¶Æ ‡¶¨‡¶ø‡¶ü 1‡•§
        x & (1 << idx): ‡¶¨‡¶ø‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶á‡¶ú AND ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá idx-‡¶§‡¶Æ ‡¶¨‡¶ø‡¶ü 1 ‡¶ï‡¶ø‡¶®‡¶æ‡•§
        ‡¶Ø‡¶¶‡¶ø 1, ‡¶§‡¶¨‡ßá ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü true (‡¶Ö‡¶®‡ßç‡¶Ø‡¶•‡¶æ‡ßü false)‡•§
    ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
        int x = 5; // ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø: 0101
        int idx = 2;
        bool isSet = BitCheking(x, idx); // ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø: 0101 & 0100 = 0100
        cout << isSet; // ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü: 1 (‡¶∏‡¶§‡ßç‡¶Ø)

    ‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ:
        x = 5 = 0101, ‡¶è‡¶¨‡¶Ç idx = 2 ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßá‡¶∞ ‡¶¨‡¶ø‡¶ü 1‡•§ ‡¶§‡¶æ‡¶á ‡¶è‡¶ü‡¶ø true‡•§
*/
bool BitCheking(int x, int idx){ return x & (1<<idx); }

///############################################################################

///############################## Bit Toggling ################################

/*
    4. BitToggling(int x, int idx)
    ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø x ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ idx-‡¶§‡¶Æ ‡¶¨‡¶ø‡¶ü‡¶ï‡ßá ‡¶ü‡¶ó‡¶≤ (‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶â‡¶≤‡ßç‡¶ü‡ßá) ‡¶ï‡¶∞‡ßá‡•§
    ‡¶Ø‡¶¶‡¶ø 1 ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá 0 ‡¶π‡¶¨‡ßá‡•§ ‡¶Ü‡¶∞ ‡¶Ø‡¶¶‡¶ø 0 ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá 1 ‡¶π‡¶¨‡ßá‡•§

    ‡¶≤‡¶ú‡¶ø‡¶ï:
        1 << idx: 1-‡¶ï‡ßá idx-‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶∏‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßá‡¶¨‡¶≤ idx-‡¶§‡¶Æ ‡¶¨‡¶ø‡¶ü 1‡•§
        x ^ (1 << idx): ‡¶¨‡¶ø‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶á‡¶ú XOR ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá idx-‡¶§‡¶Æ ‡¶¨‡¶ø‡¶ü ‡¶ü‡¶ó‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡•§
    ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
        int x = 5; // ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø: 0101
        int idx = 1;
        x = BitToggling(x, idx); // ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø: 0101 ^ 0010 = 0111
        cout << x; // ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü: 7

    ‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ:
        ‡¶Ü‡¶ó‡ßá: x = 5 = 0101
        ‡¶™‡¶∞‡ßá: idx = 1 ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßá‡¶∞ ‡¶¨‡¶ø‡¶ü ‡¶ü‡¶ó‡¶≤ ‡¶ï‡¶∞‡ßá x = 7 = 0111‡•§
*/

bool BitToggling(int x, int idx){ return x = x ^ (1<<idx); }

///############################################################################

///############################## Power Of Two ################################

/*
    5. PowerOfTwo(int x)
    ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ x ‡¶ï‡¶ø 2-‡¶è‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶®‡¶æ‡•§

    ‡¶≤‡¶ú‡¶ø‡¶ï:
        2-‡¶è‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ (‡¶Ø‡ßá‡¶Æ‡¶®: 1,2,4,8,16) ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø‡¶§‡ßá ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶ø‡¶ü 1 ‡¶•‡¶æ‡¶ï‡ßá‡•§
        ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: 2=10, 4=100, 8=1000‡•§
        (x & (x - 1)): ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï ‡¶¨‡¶ø‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶≤‡ßá ‡¶°‡¶æ‡¶®‡¶™‡¶æ‡¶∂‡ßá‡¶∞ 1 ‡¶¨‡¶ø‡¶ü ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶Ø‡¶æ‡¶Ø‡¶º‡•§
        ‡¶Ø‡¶¶‡¶ø ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü 0 ‡¶π‡¶Ø‡¶º, ‡¶§‡¶¨‡ßá ‡¶è‡¶ü‡¶ø 2-‡¶è‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞‡•§
        x && !(x & (x - 1)): ‡¶è‡¶ü‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá x ‡¶∂‡ßÇ‡¶®‡ßç‡¶Ø ‡¶®‡¶Ø‡¶º ‡¶è‡¶¨‡¶Ç ‡¶ì‡¶™‡¶∞‡ßá‡¶∞ ‡¶∂‡¶∞‡ßç‡¶§ ‡¶Æ‡¶ø‡¶≤‡ßá‡•§

    ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡ßß: 2-‡¶è‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ 
        int x = 8; // ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø: 1000
        bool isPowerOfTwo = PowerOfTwo(x); // 1000 & 0111 = 0
        cout << isPowerOfTwo; // ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü: 1 (‡¶∏‡¶§‡ßç‡¶Ø)

    ‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ:
        x = 8 = 1000, ‡¶è‡¶¨‡¶Ç x‚àí1 = 7 = 0111‡•§
        x & (x - 1) = 0, ‡¶§‡¶æ‡¶á ‡¶è‡¶ü‡¶ø 2-‡¶è‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞‡•§

    ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡ß®: 2-‡¶è‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶®‡ßü
        int x = 10; // ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø: 1010
        bool isPowerOfTwo = PowerOfTwo(x); // 1010 & 1001 != 0
        cout << isPowerOfTwo; // ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü: 0 (‡¶Æ‡¶ø‡¶•‡ßç‡¶Ø‡¶æ)

    ‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ:
        x = 10 = 1010, ‡¶è‡¶¨‡¶Ç x‚àí1 = 9 = 1001‡•§
        x & (x - 1) ‚â† 0, ‡¶§‡¶æ‡¶á ‡¶è‡¶ü‡¶ø 2-‡¶è‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶®‡ßü‡•§
*/
bool PowerOfTwo(int x){ return (x && !(x&(x-1))); }

///############################################################################

int main()
{
    // FST_IO
    // call and testing

    return 0;
}

///############################# Practice problems #############################
/*
    i. LeetCode
        Single Number
        Number of 1 Bits
        Power of Two
    ii. HackerRank
        Flipping Bits
        Maximizing XOR
    iii. Codeforces
        Shifting Bits
        XOR Sum
*/